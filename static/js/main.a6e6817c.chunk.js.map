{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","value","setValue","setMovies","useState","setMovie","notFound","setNotFound","isLoading","setIsLoading","handleSearchMovie","a","query","fetch","then","res","json","catch","Response","Error","response","newMovie","Title","Plot","url","Poster","imdbID","finally","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","onChange","target","onClick","disabled","currentMovie","isIncluded","forEach","item","currentMovies","handleAddMovie","App","setQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6e6817c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  value: string,\n  movies: Movie[],\n  setValue: (query: string) => void,\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  value,\n  movies,\n  setValue,\n  setMovies,\n}) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [notFound, setNotFound] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const getImgUrl = (url: string) => {\n    return url === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : url;\n  };\n\n  const handleSearchMovie = async () => {\n    setIsLoading(true);\n    await getMovie(value)\n      .then((response) => {\n        if ('imdbID' in response) {\n          const newMovie: Movie = {\n            title: response.Title,\n            description: response.Plot,\n            imgUrl: getImgUrl(response.Poster),\n            imdbUrl: `https://www.imdb.com/title/${response.imdbID}`,\n            imdbId: response.imdbID,\n          };\n\n          setMovie(newMovie);\n        } else {\n          setNotFound(true);\n          setMovie(null);\n        }\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleChangeQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    setNotFound(false);\n    setValue(event.target.value);\n  };\n\n  const handleAddMovie = (currentMovie: Movie) => {\n    let isIncluded = false;\n\n    movies.forEach(item => {\n      if (item.imdbId === currentMovie.imdbId) {\n        isIncluded = true;\n      }\n    });\n\n    if (!isIncluded) {\n      setMovies(currentMovies => [...currentMovies, currentMovie]);\n    }\n\n    setMovie(null);\n    setValue('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': notFound,\n              })}\n              value={value}\n              onChange={handleChangeQuery}\n            />\n          </div>\n\n          {notFound && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n              onClick={handleSearchMovie}\n              disabled={!value}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => movie && handleAddMovie(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=75d0e657';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          value={query}\n          movies={movies}\n          setValue={setQuery}\n          setMovies={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}